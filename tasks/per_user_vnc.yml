# For now, test if the user home directory exists. A more sophisticated check would use getent and get the user's home directory
# - name: STAT; check if user home directory exists
#   stat:
#     path: "/home/{{ vnc_user }}"
#   register: user_home_dir
#   ignore_errors: true

- name: GETENT; check if user exists
  getent:
    database: passwd
    # key: "{{ item.key }}"
    fail_key: false
  # loop: "{{ VNC_USERS|dict2items }}"

- debug:
    var: ansible_facts.getent_passwd

- block:
  - name: FILE; create .vnc directory
    file:
      mode: 0755
      owner: "{{ item.key }}"
      group: "{{ item.key }}"
      path: "/home/{{ item.key }}/.vnc"
      state: directory
    loop: "{{ VNC_USERS|dict2items }}"

  - block:
    # - name: STAT; check if VNC password is already set
    #   stat:
    #     path: "/home/{{ vnc_user }}/.vnc/passwd"
    #   register: vnc_passwd_file

    # - name: GROUP; Ensure $USERNAME group exists
    #   group:
    #     name: "{{USERNAME}}"
    #     state: present

    - name: SHELL; Set default VNC password
      shell: "echo '{{ item.value.password }}' | vncpasswd -f > /home/{{ item.key }}/.vnc/passwd"
      become: true
      become_user: "{{ item.key }}"
      loop: "{{ VNC_USERS|dict2items }}"

      # when: not vnc_passwd_file.stat.exists

    - name: FILE; Set correct permissions for VNC passwd file
      file:
        mode: 0600
        owner: "{{ item.key }}"
        group: "{{ item.key }}"
        path: /home/{{ item.key }}/.vnc/passwd
      loop: "{{ VNC_USERS|dict2items }}"
    when: VNC_PASSWORD_METHOD == "vncpassword"

  - name: COPY; Add Startup File
    copy:
      content: |
        #!/bin/sh

        export LANG=en_US.UTF-8

        unset SESSION_MANAGER
        export XDG_SESSION_TYPE=x11
        export GNOME_SHELL_SESSION_MODE=ubuntu

        /etc/X11/xinit/xinitrc
        vncconfig -iconic &
        [ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
        dbus-launch --exit-with-session /usr/bin/gnome-session --session=ubuntu
      dest: "/home/{{ item.key }}/.vnc/xstartup"
      owner: "{{ item.key }}"
      group: "{{ item.key }}"
      mode: "0740"
    become: true
    become_user: "{{ item.key }}"
    loop: "{{ VNC_USERS|dict2items }}"

  - name: COMMAND; check if vnc is already running
    shell: "lsof -i :{{ 5900 + item.value.display_number|int }}"
    register: vnc_running
    failed_when: False
    loop: "{{ VNC_USERS|dict2items }}"

  # - name: DEBUG; informational purposes, let's print
  #   ansible.builtin.debug:
  #     var: vnc_running

  - name: FILE; link service file on rocky and alma
    file:
      src: "/lib/systemd/system/vncserver@.service"
      dest: "/etc/systemd/system/vncserver@:{{ item.value.display_number }}.service"
      state: link
      mode: "0777"
    when:  ansible_facts['distribution'] == "AlmaLinux" or ansible_facts['distribution'] == "Rocky"
    loop: "{{ VNC_USERS|dict2items }}"

  - name: LINEINFILE; add vncserver.users when AlmaLinux or Rocky
    lineinfile:
      path: "/etc/tigervnc/vncserver.users"
      line: ":{{ item.value.display_number }}={{ item.key }}"
      create: yes
    when:  ansible_facts['distribution'] == "AlmaLinux" or ansible_facts['distribution'] == "Rocky"
    loop: "{{ VNC_USERS|dict2items }}"

  # - name: COPY; add vncserver.users when AlmaLinux or Rocky
  #   copy:
  #     content: |
  #       :{{ vnc_display_num }}={{ VNC_USERNAME }}
  #     dest: /etc/tigervnc/vncserver.users
  #     owner: root
  #     group: root
  #     mode: "0644"
  #   become: yes
  #   when:  ansible_facts['distribution'] == "AlmaLinux" or ansible_facts['distribution'] == "Rocky"
  #   notify:
  #     - restart vnc

  # - name: FIREWALLD; permit traffic in public zone on vnc port when CentOS or AlmaLinux or Rocky
  #   firewalld:
  #     zone: public
  #     immediate: yes
  #     port: "{{ vnc_port }}/tcp"
  #     permanent: yes
  #     state: enabled
  #   when:  ansible_facts['distribution'] == "CentOS" or ansible_facts['distribution'] == "AlmaLinux" or ansible_facts['distribution'] == "Rocky"
  #   become: yes

  - name: SHELL; start vncserver when CentOS
    shell: "runuser -l {{ item.key }} -c '{{ vnc_executable }} :{{ item.value.display_number }}'"
    become: true
    when: vnc_running.results[0].rc != 0 and ansible_facts['distribution'] == "CentOS"
    ignore_errors: true
    loop: "{{ VNC_USERS|dict2items }}"

  # in Ubuntu 22, ~/.vnc/tigervnc.conf is created if it doesn't exist and worse,
  # it copies vnc.conf, which is the wrong syntax
  - name: COPY; create ~/.vnc/tigervnc.conf
    ansible.builtin.copy:
      content: |
        $localhost = "no"
      dest: "/home/{{ item.key }}/.vnc/tigervnc.conf"
      owner: "{{ item.key }}"
      group: "{{ item.key }}"
    become: true
    become_user: "{{ item.key }}"
    when: vnc_running.results[0].rc != 0 and ansible_distribution == "Ubuntu" and ansible_distribution_major_version | int >= 22
    loop: "{{ VNC_USERS|dict2items }}"

  - name: COMMAND; start vncserver when Ubuntu 22+
    ansible.builtin.command: "runuser -l {{ item.key }} -c '{{ vnc_executable }} -localhost no -ZlibLevel {{ VNC_ZLIB_LEVEL }} -FrameRate {{ VNC_FRAME_RATE }} :{{ item.value.display_number }}'"
    become: true
    when: vnc_running.results[0].rc != 0 and ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_major_version'] | int >= 22
    loop: "{{ VNC_USERS|dict2items }}"
    ignore_errors: true

  - name: COMMAND; start vncserver when < Ubuntu 22
    ansible.builtin.command: "runuser -l {{ item.key }} -c '{{ vnc_executable }} -localhost no :{{ item.value.display_number }}'"
    become: true
    when: vnc_running.results[0].rc != 0 and ansible_facts['distribution'] == "Ubuntu" and ansible_facts['distribution_major_version'] | int < 22
    loop: "{{ VNC_USERS|dict2items }}"
    ignore_errors: true

  - name: SERVICE; enable & start vncserver when AlmaLinux or Rocky
    service:
      name: vncserver@:{{ item.value.display_number }}.service
      enabled: true
      state: restarted
    become: true
    when:  ansible_facts['distribution'] == "AlmaLinux" or ansible_facts['distribution'] == "Rocky"
    loop: "{{ VNC_USERS|dict2items }}"
  when: ansible_facts.getent_passwd[item.key] != None
